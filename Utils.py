# Utils.py
# CÃ¡c hÃ m tiá»‡n Ã­ch: log, validate dá»¯ liá»‡u, format káº¿t quáº£

import datetime

# --- Logging ---
def log_event(message, logfile="events.log"):
    """Ghi láº¡i sá»± kiá»‡n vÃ o file log"""
    timestamp = datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    with open(logfile, "a", encoding="utf-8") as f:
        f.write(f"[{timestamp}] {message}\n")


# --- Validation ---
def validate_seats(available_seats, requested=1):
    """Kiá»ƒm tra sá»‘ gháº¿ cÃ²n trá»‘ng"""
    return available_seats >= requested


def validate_booking_type(btype):
    """Chá»‰ cho phÃ©p loáº¡i booking há»£p lá»‡"""
    return btype.lower() in ["movie", "bus"]


# --- Formatting ---
def format_booking(booking):
    """
    booking: dict hoáº·c tuple chá»©a thÃ´ng tin booking
    VÃ­ dá»¥: {"user": "Alice", "type": "movie", "ref": "Avengers"}
    """
    if isinstance(booking, dict):
        return f"ğŸ‘¤ {booking['user']} Ä‘áº·t {booking['type']} â†’ {booking['ref']}"
    elif isinstance(booking, tuple) and len(booking) >= 4:
        # tuple tá»« SQLite: (id, user, type, ref_id)
        return f"ğŸ‘¤ {booking[1]} Ä‘áº·t {booking[2]} (ref_id={booking[3]})"
    else:
        return str(booking)


def format_booking_list(bookings):
    """In Ä‘áº¹p danh sÃ¡ch booking"""
    if not bookings:
        return "ğŸ“­ ChÆ°a cÃ³ vÃ© nÃ o."
    return "\n".join([f"{i+1}. {format_booking(b)}" for i, b in enumerate(bookings)])
